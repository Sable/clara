/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import java.util.HashMap;

/*
 * Registers all information necessary to resolve advice dependencies with the backend.
 */
aspect DependentAdviceCodegen {

    public int TypeDecl.daCounter = 0;
	
	syn lazy String DAStateMachine.name() =
    	"daStateMachine$" + hostType().daCounter++;

	//registers an advice dependency
	public void AdviceDependency.jimplify2() {
		createAspectInfo();	
	}

	public void AdviceDependency.createAspectInfo() {
		ca.mcgill.sable.clara.weaving.aspectinfo.DAInfo dai =
			((ca.mcgill.sable.clara.HasDAInfo) abc.main.Main.v().getAbcExtension()).getDependentAdviceInfo();
			
	    abc.weaving.aspectinfo.GlobalAspectInfo gai =
	    	abc.main.Main.v().getAbcExtension().getGlobalAspectInfo();
		
		ca.mcgill.sable.clara.weaving.aspectinfo.AdviceDependency ad =
			new ca.mcgill.sable.clara.weaving.aspectinfo.AdviceDependency(
					strongAdviceToVars(),
					weakAdviceToVars(),
					gai.getAspect(getAspect().abcClass()),
					pos()
		);
		
		dai.addAdviceDependency(ad);
	}
	
		
	//registers a dependency state-machine
	public void DAStateMachine.jimplify2() {
		createAspectInfo();	
	}

	protected void DAStateMachine.createAspectInfo() {
		abc.tm.weaving.matching.SimpleStateMachine sm = new abc.tm.weaving.matching.SimpleStateMachine();
		Map<String,abc.tm.weaving.matching.State>
			stateNameToAIState = new HashMap<String,abc.tm.weaving.matching.State>();
		for(StateAndEdges s: getStates()) {
			abc.tm.weaving.matching.State state = sm.newState();
			state.setInitial(s.getInitial());
			state.setFinal(s.getFinal());
			stateNameToAIState.put(s.getStateName(),state);			
		}	
		for(StateAndEdges s: getStates()) {
			abc.tm.weaving.matching.State from
				= stateNameToAIState.get(s.getStateName());
			for(Edge e: s.getEdges()) {
				abc.tm.weaving.matching.State toState
					= stateNameToAIState.get(e.getTargetStateName());
				sm.newTransition(from,toState,e.getSymbol());
			}			
		}	
		
		ca.mcgill.sable.clara.weaving.aspectinfo.TracePattern pat = new ca.mcgill.sable.clara.weaving.aspectinfo.TracePatternFromSource(
			aspectClass(),
			symbolToVars(),
			sm,
			name());
			
		ca.mcgill.sable.clara.weaving.aspectinfo.DAInfo dai =
			((ca.mcgill.sable.clara.HasDAInfo) abc.main.Main.v().getAbcExtension()).getDependentAdviceInfo();
	
		dai.registerTracePattern(pat);						
	}
	
	
	//registers a dependent advice
	refine AdviceCodegen
	protected void AdviceDecl.createAspectInfo() {
		AdviceCodegen.AdviceDecl.createAspectInfo();
		
		String qualifiedLowLevelAdviceName = getAspect().jvmName() + "." + name();
		String qualifiedUserGivenAdviceName = getAspect().jvmName() + "." + getGivenName();
				
		ca.mcgill.sable.clara.weaving.aspectinfo.DAInfo dai =
			((ca.mcgill.sable.clara.HasDAInfo) abc.main.Main.v().getAbcExtension()).getDependentAdviceInfo();

		dai.registerDependentAdvice(qualifiedLowLevelAdviceName,qualifiedUserGivenAdviceName);
	}

	syn Map<String,java.util.List<String>> AdviceDependency.strongAdviceToVars() {
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		for(AdviceNameAccess access: getStrongNames()) {
			java.util.List<String> l = new ArrayList<String>();
			for(ArgVarRef a: access.getArgVarRefs()) {
				l.add(a.getAdviceVar());
			}
			res.put(getAspect().fullName()+"."+access.getAdviceNameRef(),l);
		}	
		return res;
	}

	syn Map<String,java.util.List<String>> AdviceDependency.weakAdviceToVars() {
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		for(AdviceNameAccess access: getWeakNames()) {
			java.util.List<String> l = new ArrayList<String>();
			for(ArgVarRef a: access.getArgVarRefs()) {
				l.add(a.getAdviceVar());
			}
			res.put(getAspect().fullName()+"."+access.getAdviceNameRef(),l);
		}	
		return res;
	}

	syn Map<String,java.util.List<String>> DAStateMachine.symbolToVars() {
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		for(AdviceNameAccess access: getSymbols()) {
			java.util.List<String> l = new ArrayList<String>();
			for(ArgVarRef a: access.getArgVarRefs()) {
				l.add(a.getAdviceVar());
			}
			res.put(access.getAdviceNameRef(),l);
		}	
		return res;
	}

	inh AspectDecl AdviceDependency.getAspect();
	inh AspectDecl AdviceDecl.getAspect();
	eq AspectDecl.getBodyDecl(int i).getAspect() = this;
	eq BodyDecl.getChild(int i).getAspect() { throw new Error("Missing equation"); }
	eq TypeDecl.getChild(int i).getAspect() { throw new Error("Missing equation"); }

}