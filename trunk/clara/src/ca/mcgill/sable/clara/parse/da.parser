/* Clara - Compile-time Approximation of Runtime Analyses
 * Copyright (C) 2009 Eric Bodden
 * 
 * This framework uses technology from Soot, abc, JastAdd and
 * others. 
 *
 * This framework is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
/*
 * We add:
 * (1) Advice dependency declarations
 * (2) Names to advice
 * (3) The "dependent" modifier.
 */ 

BodyDecl aspect_body_declaration =
        advice_dependency.a
        {:
            return a;
        :}
    |
        da_state_machine.a
        {:
            return a;
        :}    
;

AdviceDependency advice_dependency =
        DEPENDENCY LBRACE STRONG advice_name_list.s SEMICOLON RBRACE
        {:
			return new AdviceDependency(s,new List<AdviceNameAccess>());
		:}
	|   DEPENDENCY LBRACE STRONG advice_name_list.s SEMICOLON WEAK advice_name_list.w SEMICOLON RBRACE
        {:
			return new AdviceDependency(s,w);
		:}
	;

DAStateMachine da_state_machine =
        DEPENDENCY LBRACE advice_name_list.a SEMICOLON state_list.s RBRACE
        {:
			return new DAStateMachine(a,s);
		:}
;	
	
List state_list =
		state_desc.s
		{:
			return new List().add(s);
		:}
	|	state_list.l state_desc.s
		{:	
			l.add(s);
			return l;
		:}
;

StateAndEdges state_desc = 
		modifiers.m? IDENTIFIER.i edge_list_opt.l
		{:
			boolean isInitial = new Modifiers(m).numModifier("initial")!=0;
			boolean isFinal = new Modifiers(m).numModifier("final")!=0;
			return new StateAndEdges(isInitial,isFinal,i,l);
		:}
;

List edge_list_opt =
		SEMICOLON
		{:
			return new List();
		:}
	|
		COLON edge_list.l SEMICOLON
		{:
			return l;
		:}
;

List edge_list =
		edge.e
		{:
			return new List().add(e);
		:}
	|	
		edge_list.l COMMA edge.e
		{:
			return l.add(e);
		:}
;
			
Edge edge =
		IDENTIFIER.sym MINUS GT IDENTIFIER.to
		{:
			return new Edge(sym,to);
		:}
;		

List advice_name_list =
		advice_name.n
		{:
			return new List<AdviceNameAccess>().add(n);
		:}
	|
		advice_name_list.l COMMA advice_name.n
		{:
			return l.add(n);
		:}
;	
	
AdviceNameAccess advice_name = 
		IDENTIFIER.i
		{:
			return new AdviceNameAccess(i,new List<ArgVarRef>());
		:}
	|
		IDENTIFIER.i LPAREN identifier_star_list.ids RPAREN
		{:
			return new AdviceNameAccess(i,ids);
		:}
	;

List identifier_star_list =
    identifier_star.i                                  {: return new List<ArgVarRef>().add(i); :}
  | identifier_star_list.l COMMA identifier_star.i    {: return l.add(i); :}
  ;
	
ArgVarRef identifier_star = 
		IDENTIFIER.i
		{:
			return new ArgVarRef(i);
        :}
    |  	
        PC_MULT.p
		{:
            return new ArgVarRef(WILDCARD+(wildcard_count++)); //generate fresh variable name for wildcard
        :}    
	;

	
	
AdviceSpec advice_spec =
     BEFORE.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN.y
       {: ParserTrace.parserTrace("before(formals)");
          AdviceSpec s = new BeforeSpec(a);
          s.setGivenName(name);
          return s;
       :}
  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN.y
       {: ParserTrace.parserTrace("after(formals)");
          AdviceSpec s = new AfterSpec(a);
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_RETURNING.y
       {: ParserTrace.parserTrace("after(formals)returning");
          AdviceSpec s = new AfterReturningSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_RETURNING LPAREN RPAREN.y // just to pass ajc tests
       {: ParserTrace.parserTrace("after(formals)returning()");
          AdviceSpec s = new AfterReturningSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_RETURNING 
                                               LPAREN formal_parameter.b RPAREN.y
       {: ParserTrace.parserTrace("after(formals) returning(p)");
          AdviceSpec s = new AfterReturningSpec(a, new Opt(b));
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_THROWING.y
       {: ParserTrace.parserTrace("after(formals)throwing");
          AdviceSpec s = new AfterThrowingSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_THROWING LPAREN RPAREN.y // ajc compatibility again
       {: ParserTrace.parserTrace("after(formals)throwing");
          AdviceSpec s = new AfterThrowingSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_THROWING
                                               LPAREN formal_parameter.b RPAREN.y
       {: ParserTrace.parserTrace("after(formals)throwing(p)");
          AdviceSpec s = new AfterThrowingSpec(a, new Opt(b));
          s.setGivenName(name);
          return s;
       :}

  |  type.a AROUND IDENTIFIER.name LPAREN formal_parameter_list.b? RPAREN.y
       {: ParserTrace.parserTrace("non-void-type around (formals)");
          AdviceSpec s = new AroundSpec(b, a);
          s.setGivenName(name);
          return s;
       :}

  |  VOID.a AROUND IDENTIFIER.name LPAREN formal_parameter_list.b? RPAREN.y
       {: ParserTrace.parserTrace("VOID around (formals)");
          AdviceSpec s = new AroundSpec(b, new PrimitiveTypeAccess("void"));
          s.setGivenName(name);
          return s;
       :}
  ;
  
  
Modifier modifier =
	    DEPENDENT.x
	    {:
	    	ParserTrace.parserTrace("dependent modifier");
	    	return new Modifier("dependent");
	    :}
    |
    	INITIAL.x	
	    {:
	    	ParserTrace.parserTrace("initial modifier");
	    	return new Modifier("initial");
	    :}
	    /* "final" already exists */
;
  