/* Clara - Compile-time Approximation of Runtime Analyses
 * Copyright (C) 2009 Eric Bodden
 * 
 * This framework uses technology from Soot, abc, JastAdd and
 * others. 
 *
 * This framework is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
import java.util.Collections;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

/*
 * Advice specs can now hold an additional advice name.
 */
aspect AdviceNames
{
 	protected String AdviceSpec.givenName = null;
 	
 	//called within the grammar to attach given name; to be called only once
 	public void AdviceSpec.setGivenName(String n) {
 	    if(givenName!=null) throw new IllegalStateException("Name already set to:" +givenName);
 		givenName = n;
 	}

 	syn lazy boolean AdviceSpec.hasGivenName() {
 		return givenName!=null;
 	}

 	syn lazy String AdviceSpec.getGivenName() {
 		return givenName;
 	}
 	
 	//propagate upwards, from AdviceSpec to AdviceDecl
 	
 	syn lazy boolean AdviceDecl.hasGivenName() {
 		boolean ret = getAdviceSpec().hasGivenName();
 		if(ret && abc.main.Debug.v().traceExecution) {
 			getAdviceSpec().localLookupImplicitVariable("thisJoinPointStaticPart");
 		} 			 	
 		return ret;
 	} 

 	syn lazy String AdviceDecl.getGivenName() { 	
 		return getAdviceSpec().getGivenName();
 	} 
 	
 

}