/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect DefaultVariables {

	//this rewrite actually sets the default variable names if none are given:
	//if no variables are given but the respective named advice exists and 
	//has at least one variable then we apply the rewrite, adding the advice's
	//variables the AdviceNameAccess
	//also we register that default variables were set (to alter warning behaviour)
	rewrite AdviceNameAccess {
		when(getNumArgVarRef()==0 && allAdviceNameToVars().get(getAdviceNameRef())!=null
		     && ((java.util.List)allAdviceNameToVars().get(getAdviceNameRef())).size()>0)
		to AdviceNameAccess {		
			hasDefaultVariables = true;	
			for(String v: ((java.util.List<String>)allAdviceNameToVars().get(getAdviceNameRef()))) {
				addArgVarRef(new ArgVarRef(v));
			}
			return this;
		} 
	}
	
	//computes a mapping that maps from the advice names to the respective advice's
	//variable names; the mapping is empty if there are no named advice  
 	syn lazy Map<String,java.util.List<String>> AspectDecl.adviceNameToVars() {
 		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
 		for(BodyDecl b: getBodyDecls()) {
 			if(b instanceof AdviceDecl) {
 				AdviceDecl a = (AdviceDecl) b;
 				res.putAll(a.adviceNameToVars());
 			}		
 		}
 		return res;
 	}

	//forward from AdviceSpec to AdviceDecl
	syn lazy Map<String,java.util.List<String>> AdviceDecl.adviceNameToVars() {
 		return getAdviceSpec().adviceNameToVars();
 	}
 	
 	//computes a mapping that maps from the advice name to its
	//variable names; the mapping is empty if the advice has no given name  
	syn lazy Map<String,java.util.List<String>> AdviceSpec.adviceNameToVars() {
 		if(!hasGivenName()) return Collections.emptyMap();
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		java.util.List<String> vars = new ArrayList<String>();
		for(ParameterDeclaration param: getParameters()) {
			vars.add(param.getID());
		}
		res.put(getGivenName(),vars);
		return res;
	} 
	
	//same as above but adds the returning-variable to the variable list (if present)  
	syn lazy Map<String,java.util.List<String>> AfterReturningSpec.adviceNameToVars() {
		Map<String,java.util.List<String>> res = super.adviceNameToVars();
		if(hasReturnParameter()) {
			java.util.List<String> vars = res.values().iterator().next();
			vars.add(getReturnParameter().getID());
		}
		return res;
	}
	
	//same as above but adds the throwing-variable to the variable list (if present)  
	syn lazy Map<String,java.util.List<String>> AfterThrowingSpec.adviceNameToVars() {
		Map<String,java.util.List<String>> res = super.adviceNameToVars();
		if(hasExceptionParameter()) {
			java.util.List<String> vars = res.values().iterator().next();
			vars.add(getExceptionParameter().getID());
		}
		return res;
	}

 	//inherited attribute to make mapping available in an AdviceDependency
	inh Map AdviceDependency.allAdviceNameToVars();
	inh Map DAStateMachine.allAdviceNameToVars();
 	eq AspectDecl.getBodyDecl(int i).allAdviceNameToVars() = adviceNameToVars();  
	eq BodyDecl.getChild(int i).allAdviceNameToVars() { throw new Error("Missing equation for allAdviceNameToVars()"); }
	eq TypeDecl.getChild(int i).allAdviceNameToVars() { throw new Error("Missing equation for allAdviceNameToVars()"); }

 	//inherited attribute to make mapping available in an AdviceNameAccess
 	inh Map AdviceNameAccess.allAdviceNameToVars(); 	 	
 	eq AdviceDependency.getStrongName(int j).allAdviceNameToVars() = allAdviceNameToVars(); 
 	eq AdviceDependency.getWeakName(int j).allAdviceNameToVars() = allAdviceNameToVars();
 	eq DAStateMachine.getSymbol(int j).allAdviceNameToVars() = allAdviceNameToVars(); 
	
	protected boolean AdviceNameAccess.hasDefaultVariables = false;
	
	public boolean AdviceNameAccess.hasDefaultVariables() {
		return hasDefaultVariables;
	} 
}