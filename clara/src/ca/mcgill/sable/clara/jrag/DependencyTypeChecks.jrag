/* Clara - Compile-time Approximation of Runtime Analyses
 * Copyright (C) 2009 Eric Bodden
 * 
 * This framework uses technology from Soot, abc, JastAdd and
 * others. 
 *
 * This framework is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import ca.mcgill.sable.clara.weaving.weaver.depadviceopt.ds.Bag;
import ca.mcgill.sable.clara.weaving.weaver.depadviceopt.ds.HashBag;
import java.util.ArrayList;

/*
 * Implements type checks for dependent advice. Since dependent advice can also be generated
 * directly in the backend (e.g. by a tracematch) some type checks are performed there:
 * ca.mcgill.sable.clara.weaving.aspectinfo.DAInfo.consistencyCheckForDependentAdvice()
 */
aspect DependencyTypeChecks {

    /* Performs the following type checks:
     * (1) an advice referred to in the dependency declaration does not exist (under the given name)
     * (2) if the variables were not set to the default variables
     *     a) a variable only occurs once in the entire dependency declaration and it's not a wildcard
     *        then we give a warning that it should be a wildcard.
     *     b) the number of variables stated is not the same as the number of actual advice variables
     */
 	public void AdviceNameAccess.typeCheck() {
		if(!allAdviceNames().contains(getAdviceNameRef())) {
			error("There is no advice with name '"+getAdviceNameRef()+"' defined.");
		}
			
		if(!hasDefaultVariables()) {
			for(int i=0; i<getNumArgVarRef(); i++) {
				ArgVarRef ref = getArgVarRef(i);
				if(!ref.isWildcard()) {
					String var = ref.getAdviceVar();
					if(allVarCount().countOf(var)<2) {
					 	//variable exists apparently at least one time
						assert allVarCount().countOf(var)>0;
						warning("Variable "+var+" only referenced once. Consider using wildcard '*' instead."); 
					}
				}
			}
			
			if(adviceVars()!=null && adviceVars().size()!=getNumArgVarRef()) {
				error("Advice with name '"+getAdviceNameRef()+"' has "+adviceVars().size()+
				      " arguments but here "+getNumArgVarRef()+" arguments were given. Did you forget about the returning/throwing variable?");
			}			
		}
	}
	
    /* Performs the following type check:
     * In each dependency declaration each advice name should occur at most once.
     */
	public void AdviceDependency.typeCheck() {
		Bag<String> nameCount = new HashBag<String>();
		for(AdviceNameAccess a: getStrongNames()) {
			nameCount.add(a.getAdviceNameRef());
		}
		for(AdviceNameAccess a: getWeakNames()) {
			nameCount.add(a.getAdviceNameRef());
		}
		for(String adviceName: new HashSet<String>(nameCount)) {
			if(nameCount.countOf(adviceName)>1) {
				error("Advice name '"+adviceName+"' referenced multiple times.");
			}
		}
	}	
	
    /* Performs the following type checks:
     * - there must be at least one final and at least one initial state
     * - every state must have a unique name
     * - if names are unique then
     *     - the target state and symbol of every transition must exist
     *     - there may be no states unreachable from an initial state
     *     - one must be able to reach a final state from every state
     */
	public void DAStateMachine.typeCheck() {
		boolean foundFinal = false, foundInitial = false;
		for(StateAndEdges s: getStates()) {
			foundFinal |= s.getFinal();
			foundInitial |= s.getInitial();
		}
		if(!foundFinal) {
				error("State machine contains no final state.");
		}
		if(!foundInitial) {
				error("State machine contains no initial state.");
		}			

		boolean unique = true;
		java.util.Set<String> stateNames = new java.util.HashSet<String>();
		for(StateAndEdges s: getStates()) {
			if(!stateNames.add(s.getStateName())) {
				s.error("Duplicate state name '"+s.getStateName()+"'.");
				unique = false;
			}
		}

		if(!unique) return; 

		java.util.Map<String,StateAndEdges> nameToState = new java.util.HashMap<String,StateAndEdges>();
		for(StateAndEdges s: getStates()) {
			nameToState.put(s.getStateName(),s);
		}
				
		java.util.Set<StateAndEdges> allStates = new java.util.HashSet<StateAndEdges>();
		for(StateAndEdges s: getStates()) {
			allStates.add(s);
		}
		
		java.util.Set<StateAndEdges> reachable = new java.util.HashSet<StateAndEdges>();
		for(StateAndEdges s: getStates()) {
			if(s.getInitial()) {
				reachable.add(s);
			}
		}		
		
		java.util.Set<String> symbols = new java.util.HashSet<String>();
		for(AdviceNameAccess sym: getSymbols()) {
			symbols.add(sym.getAdviceNameRef());
		}
		
		java.util.Set<StateAndEdges> worklist = new java.util.HashSet<StateAndEdges>(reachable);

		while(!worklist.isEmpty()) {
			Iterator<StateAndEdges> it = worklist.iterator();
			StateAndEdges s = it.next();
			it.remove();
			
			for(Edge e: s.getEdges()) {
				String symbol = e.getSymbol();
				if(!symbols.contains(symbol))
					e.error("Symbol '"+symbol+"' not declared.");
			
				String tgtName = e.getTargetStateName();
				StateAndEdges tgt = nameToState.get(tgtName);
				if(tgt==null) {
					e.error("Target state '"+tgtName+"' does not exist.");
				} else if(!reachable.contains(tgt)) {
					reachable.add(tgt);
					worklist.add(tgt);
				}
			}
		}		
		
		java.util.Set<StateAndEdges> unreachable = new java.util.HashSet<StateAndEdges>(allStates);
		unreachable.removeAll(reachable);
		
		for(StateAndEdges s: unreachable) {
			s.error("State unreachable from any initial state.");
		}
		
		for(StateAndEdges state: reachable) {

			java.util.Set<StateAndEdges> visited = new java.util.HashSet<StateAndEdges>();

			worklist = new java.util.HashSet<StateAndEdges>();
			worklist.add(state);
	
			boolean foundFinalState = false;
	
			while(!worklist.isEmpty()) {
				Iterator<StateAndEdges> it = worklist.iterator();
				StateAndEdges s = it.next();
				it.remove();
				
				if(s.getFinal()) {
					foundFinalState = true;
					break;
				}
				
				for(Edge e: s.getEdges()) {
					String tgtName = e.getTargetStateName();
					StateAndEdges tgt = nameToState.get(tgtName);
					if(tgt!=null && !visited.contains(tgt)) {
						visited.add(tgt);
						worklist.add(tgt);
					}
				}
			}		
			
			if(!foundFinalState)
				state.error("Cannot reach any final state from this state.");
		}

		

	}	
	
 	syn lazy java.util.List<String> AdviceNameAccess.adviceVars() {
 		Map<String,java.util.List<String>> all = (Map<String,java.util.List<String>>)allAdviceNameToVars();
 		return all.get(getAdviceNameRef());
 	}

	syn lazy Bag<String> AdviceDependency.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumStrongName(); i++) {
			AdviceNameAccess access = getStrongName(i);
			res.addAll(access.varCount());
		}
		for(int i=0; i<getNumStrongName(); i++) {
			AdviceNameAccess access = getWeakName(i);
			res.addAll(access.varCount());
		}
		return res;
	}
	
	syn lazy Bag<String> AdviceNameAccess.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumArgVarRef(); i++) {
			ArgVarRef ref = getArgVarRef(i);
			res.add(ref.getAdviceVar());						
		} 
		return res;
	}
	
	syn lazy Bag<String> DAStateMachine.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumSymbol(); i++) {
			AdviceNameAccess access = getSymbol(i);
			res.addAll(access.varCount());
		}
		return res;
	}
	
	inh Bag<String> AdviceNameAccess.allVarCount();
	eq AdviceDependency.getStrongName(int i).allVarCount() = varCount(); 
	eq AdviceDependency.getWeakName(int i).allVarCount() = varCount();
	eq DAStateMachine.getSymbol(int i).allVarCount() = varCount();
 	
 	syn lazy java.util.Collection<String> AdviceNameAccess.allAdviceNames() {
 		Map<String,java.util.List<String>> all = (Map<String,java.util.List<String>>)allAdviceNameToVars();
 		return all.keySet();
 	}
 	
	public boolean ArgVarRef.isWildcard() {
		return getAdviceVar().startsWith(ca.mcgill.sable.clara.parse.JavaParser.WILDCARD);
	}
	
	syn lazy java.util.List<AdviceDecl> AspectDecl.namedAdvice() {
		java.util.List<AdviceDecl> res = new ArrayList<AdviceDecl>(); 
		for(BodyDecl b: getBodyDecls()) {
			if(b instanceof AdviceDecl) {
				AdviceDecl a = (AdviceDecl) b;
				if(a.hasGivenName()) {
					res.add(a);									
				}
			}
		}	
		return res;
	}
	
	
}